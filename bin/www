#!/usr/bin/env node

/*
 *  VITacademics
 *  Copyright (C) 2015  Aneesh Neelam <neelam.aneesh@gmail.com>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var cluster = require('cluster');
var os = require('os');
var path = require('path');

if (process.env.NEWRELIC_APP_NAME && process.env.NEWRELIC_LICENSE) {
    require('newrelic');
}

var log;
if (process.env.LOGENTRIES_TOKEN) {
    var logentries = require('node-logentries');
    log = logentries.logger({
        token: process.env.LOGENTRIES_TOKEN
    });
}

var app = require(path.join(__dirname, '..', 'app'));
var server;

app.set('port', process.env.PORT || 3000);

var workers = {};
var processCount = process.env.PROCESS_COUNT || os.cpus().length;

var spawn = function () {
    var worker = cluster.fork();
    workers[worker.pid] = worker;
    return worker;
};

var onBind = function () {
    console.log('Started Worker Process PID: ' + process.pid + ' and is listening for requests. ');
};

if (cluster.isMaster) {
    var mongoHostAuth = process.env.MONGODB_HOST_AUTH || 'localhost';
    var mongoDatabase = process.env.MONGODB_DATABASE || 'VITacademics';
    var amqpUri = process.env.AMQP_URI || 'amqp://localhost';
    if (log) {
        log.log('info', {
            mongoHostAuth: mongoHostAuth,
            mongoDatabase: mongoDatabase,
            port: app.get('port'),
            rabbitMQUri: amqpUri
        });
        if (process.env.HOSTNAME) {
            log.log('info', {Application: process.env.HOSTNAME});
        }
        if (process.env.NEWRELIC_APP_NAME && process.env.NEWRELIC_LICENSE) {
            log.info('Using New Relic');
        }
    }
    console.log('Node.js Express Server started, listening on port: ' + app.get('port'));
    console.log('Using MongoDB Host: ' + mongoHostAuth + ', and MongoDB Database: ' + mongoDatabase);
    console.log('Using RabbitMQ Uri: ' + amqpUri);
    if (process.env.NEWRELIC_APP_NAME && process.env.NEWRELIC_LICENSE) {
        console.log('Using New Relic');
    }
    if (process.env.HOSTNAME) {
        console.log(process.env.HOSTNAME);
    }

    console.log('Spawning ' + processCount + ' worker(s)');
    for (var i = 0; i < processCount; ++i) {
        spawn();
    }
    cluster.on('exit', function (worker, code, signal) {
        console.log('Worker Process PID: ' + worker.process.pid + ' died, Code/Signal: ' + code || signal + '. Spawning a new process. ');
        if (log) {
            log.debug('Worker Process PID: ' + worker.process.pid + ' died, Code/Signal: ' + code || signal + '. Spawning a new process. ');
        }
        delete workers[worker.pid];
        spawn();
    });
}
else {
    server = app.listen(app.get('port'), onBind);
}
